# About this Book {.unnumbered}

This book is the documentation for Treeful, an R Shiny application helping people plant trees based on species distribution modelling.  

## Contribute {.unnumbered}

## Who is behind this {.unnumbered}

* Jakob Kutsch
* Christoph Trost

## About this Project and technical Approach

This project was funded from the German ministry for Education and Research from March 1st 2023 to September 1st 2023. The purpose is to build a shiny app that allows user to explore habitat shapes of trees in Europe. These habitat shapes are plots of existing trees from a merged database of close to 9 million trees. We extracted climatic variables present at each tree location. These shapes allow users to compare with their own location, a potential planting site, for the past and future. 

## Infrastructure

The docker-compose file 

### ETL Container

This container runs through the main script, fetching tree location data, getting bioclimatic variables, extracting those from the tree locations and writing everything to Postgis. 

### Postgis Database Container

All processed data from the ETL pipeline ends up in here. We chose to also write rasters to postgis, although rasters for projects like this are typically stored on disk. Our final shiny app will never read an entire raster but merely extract values from user locations. 

### Shiny Proxy Container

Shiny proxy is used to orchestrate the app itself. 

### Shiny Container

The actual app runs in this container, which is being called upon user request by shinyproxy. 

## Getting Tree Location Data

### Various academic data sources

### GBIF

### European Tree Cadastres



## Getting Bioclimatic Variables

### Why we chose what we chose

Our ETL pipeline uses bioclimatic variables for the past and the future from copernicus CDS. 

## Reading Climate Rasters into R

In order to extract bioclimatic variables from each species location, we'll have to load raster files into R. The function described here will solve a few complexities:

* We convert raster values into units fit for anlysis. 
* Stacked rasters need to be treated accordingly. 
* Efficiency matters greatly here, especially when it comes to RAM-efficient raster reading. 

What could and probably should not be done here: CRS-reprojections. Sometimes you may get a different CRS. Reproject outside of your ETL pipeline and then read. 


```{r}
#| eval: false
#| file: ../1_ETL/3_R/3_fn_get_climate_rasters.R
```

## Merging Tree Locations and Bioclimatic Variables

On efficient functions and lots of RAM

## Writing to PostGIS DB

The bioclimatic and soil rasters used in this project are several GBs large and usually do not fit into memory. This snipped reads them as raster stack, writes the stack to the PostGIS DB and removes it. 

::: {.callout-warning title="Package rpostgis retired"}
This section relies on the package rpostgis. Currently, there's no simple other way to write raster data to postGIS from R, neither sf nor terra nor stars. See [this discussion](https://github.com/r-spatial/discuss/issues/58)
:::

```{r}
#| eval: false
#| file: ../1_ETL/3_R/6_write_to_db.R
```

## Shiny App Development

## Database Deployment

## Shiny App Deployment

Thanks to our Postgis database, the Shiny app itself is rather lightweight, does not need large files to be transferred and only does a minimum of plotting. 

* Generate Dockerfile from app. Golem handles this. It is wise to double-check the Dockerfile before buidling. When adding new packages, ensure they're at the end of the Dockerfile in order to leverage build caching. 
* **On your host:** clone the repository with git clone `https://github.com/3ful/treeful.git` and move to the directory with `cd ./treeful`
*
* Run stack with swarm and compose
* 







