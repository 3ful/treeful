[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Treeful Docs",
    "section": "",
    "text": "About this Book\nThis book is the documentation for Treeful, an R Shiny application helping people plant trees based on species distribution modelling."
  },
  {
    "objectID": "index.html#contribute",
    "href": "index.html#contribute",
    "title": "Treeful Docs",
    "section": "Contribute",
    "text": "Contribute"
  },
  {
    "objectID": "index.html#who-is-behind-this",
    "href": "index.html#who-is-behind-this",
    "title": "Treeful Docs",
    "section": "Who is behind this",
    "text": "Who is behind this\n\nJakob Kutsch\nChristoph Trost"
  },
  {
    "objectID": "how-it-works.html#quarto",
    "href": "how-it-works.html#quarto",
    "title": "1  How it works",
    "section": "1.1 Quarto",
    "text": "1.1 Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "how-it-works.html#running-code",
    "href": "how-it-works.html#running-code",
    "title": "1  How it works",
    "section": "1.2 Running Code",
    "text": "1.2 Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n conn <- DBI::dbConnect(RPostgres::Postgres(),\n                        dbname = \"treeful-test\",\n                        host= \"192.168.178.148\",\n                        port=\"5432\",\n                        user=\"postgres\",\n                        password=\"mysecretpassword\")\n\ntree_db <- data.table::fread(\"../../../data/tree_db.csv\")\n\ntree_occurrence <- DBI::dbGetQuery(conn, paste0(\n      \"SELECT * FROM tree_dbs;\"))\n\ntree_occurrence <- sf::st_read(conn, layer = \"tree_dbs\")\n\n\noptions(scipen=100000000)\neu_grid <- sf::st_make_grid(sf::st_bbox(tree_occurrence),\n  n = c(100,100),\n  what = 'polygons',\n  square = FALSE,\n  flat_topped = TRUE) %>%\n  sf::st_as_sf() %>% \n  tibble::rownames_to_column(var = \"grid_id\")\n\ntree_occurrence <- sf::st_join(tree_occurrence, eu_grid, join = st_within)\ntree_grid <- tree_occurrence %>%  \n  sf::st_drop_geometry() %>% \n  dplyr::select(master_list_name, db, grid_id)\ntree_count <- tree_grid %>% \n  dplyr::group_by(grid_id) %>% \n  dplyr::count()\n\neu_grid <- eu_grid %>% \n  dplyr::left_join(tree_count)\n\ntmap::tm_shape(eu_grid) + tmap::tm_polygons(col = \"n\", alpha = 0.5, id = \"n\", style = \"log10_pretty\")\n  \nneutralocre <- \"#f5efe2ff\"\n\n  ggplot2::ggplot() +\n  ggplot2::geom_sf(data = eu_grid, aes(fill = n), color = \"white\", lwd = 0) +\n  viridis::scale_fill_viridis(direction = -1, option = \"D\", na.value = NA, trans = \"log\", breaks = c(10,100,1000,10000,100000)) +\n  ggplot2::labs(title = paste0(nrow(tree_occurrence), \" Tree Locations\"), fill = \"\") +\n  ggplot2::theme_void() +\n  ggplot2::theme(legend.position = \"bottom\", \n        legend.direction = \"horizontal\", legend.key.width = ggplot2::unit(2, \"cm\"))\n\n\nlibrary(raster)\n\nsource(\"../1_ETL/3_R/3_fn_get_climate_rasters.R\")\ngetpastclimate(source = \"copernicus\", bioclim = \"bio01\")\nbio_path <- \"BIO01\"\nbio01 <- raster(paste0(\"../1_ETL/2_Data/0_raw_data/copernicus/\", bio_path, \"_era5-to-1km_1979-2018-mean_v1.0.nc\"))\nbio01 <- calc(bio01, function(x) {x - 273.15})\nharz <- osmdata::opq_osm_id(id = 3734731, type = \"relation\") %>%\n  osmdata::osmdata_sf()\nharz <- st_make_valid(harz$osm_multipolygons)\n\nharz_bio <- raster::crop(bio01, extent(harz))\nharz_bio <- as.data.frame(harz_bio, xy = TRUE) \n\nggplot() +\n  geom_raster(data = harz_bio, aes(x = x, y = y, fill = layer)) + \n  scale_fill_viridis() +\n  theme_light() +\n  coord_quickmap() +\n  theme(legend.position = \"bottom\", legend.direction = \"horizontal\", axis.ticks = element_blank(), axis.text = element_blank(), axis.title = element_blank()) +\n  labs(fill = \"Durchschnittstemperatur 1979 - 2018\", title = \"Copernicus Temperatur am Harz 1979 - 2018\")\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html#about-this-project-and-technical-approach",
    "href": "index.html#about-this-project-and-technical-approach",
    "title": "Treeful Docs",
    "section": "About this Project and technical Approach",
    "text": "About this Project and technical Approach\nThis project was funded from the German ministry for Education and Research from March 1st 2023 to September 1st 2023. The purpose is to build a shiny app that allows user to explore habitat shapes of trees in Europe. These habitat shapes are plots of existing trees from a merged database of close to 9 million trees. We extracted climatic variables present at each tree location. These shapes allow users to compare with their own location, a potential planting site, for the past and future."
  },
  {
    "objectID": "index.html#infrastructure",
    "href": "index.html#infrastructure",
    "title": "Treeful Docs",
    "section": "Infrastructure",
    "text": "Infrastructure\n\nETL Container\nThis container runs through the main script, fetching tree location data, getting bioclimatic variables, extracting those from the tree locations and writing everything to Postgis.\n\n\nPostgis Database Container\nAll processed data from the ETL pipeline ends up in here. We chose to also write rasters to postgis, although rasters for projects like this are typically stored on disk. Our final shiny app will never read an entire raster but merely extract values from user locations.\n\n\nShiny Proxy Container\nShiny proxy is used to orchestrate the app itself.\n\n\nShiny Container\nThe actual app runs in this container, which is being called upon user request by shinyproxy."
  },
  {
    "objectID": "index.html#getting-tree-location-data",
    "href": "index.html#getting-tree-location-data",
    "title": "Treeful Docs",
    "section": "Getting Tree Location Data",
    "text": "Getting Tree Location Data\n\nVarious academic data sources\n\n\nGBIF\n\n\nEuropean Tree Cadastres"
  },
  {
    "objectID": "index.html#getting-bioclimatic-variables",
    "href": "index.html#getting-bioclimatic-variables",
    "title": "Treeful Docs",
    "section": "Getting Bioclimatic Variables",
    "text": "Getting Bioclimatic Variables\n\nWhy we chose what we chose\nOur ETL pipeline uses bioclimatic variables for the past and the future from copernicus CDS."
  },
  {
    "objectID": "index.html#merging-tree-locations-and-bioclimatic-variables",
    "href": "index.html#merging-tree-locations-and-bioclimatic-variables",
    "title": "Treeful Docs",
    "section": "Merging Tree Locations and Bioclimatic Variables",
    "text": "Merging Tree Locations and Bioclimatic Variables\nOn efficient functions and lots of RAM"
  },
  {
    "objectID": "index.html#writing-to-postgis-db",
    "href": "index.html#writing-to-postgis-db",
    "title": "Treeful Docs",
    "section": "Writing to PostGIS DB",
    "text": "Writing to PostGIS DB\nThe bioclimatic and soil rasters used in this project are several GBs large and usually do not fit into memory. This snipped reads them as raster stack, writes the stack to the PostGIS DB and removes it.\n\n\n\n\n\n\nWarning\n\n\n\nThis section relies on the package rpostgis. Currently, there’s no simple other way to write raster data to postGIS from R, neither sf nor terra nor stars. See (this discussion)[https://github.com/r-spatial/discuss/issues/58]\n\n\n\nprint(\"large data transfer out starting. Writing all Rasters as rasterstack to Postgres\")\n\ncon <- DBI::dbConnect(RPostgres::Postgres(), \n                      dbname = Sys.getenv(\"POSTGRES_DB\"),\n                      host= \"192.168.178.148\", \n                      port=\"5432\",\n                      user=\"postgres\",\n                      password=Sys.getenv(\"POSTGRES_PW\"))\n\n# \n# pastbio01 <- getpastclimate(source = \"copernicus\", bioclim = \"bio01\")\n# \n# \n# pastbio12 <- getpastclimate(source = \"copernicus\", bioclim = \"bio12\")\n# crs(pastbio12) <- \"+proj=longlat +datum=WGS84 +no_defs +type=crs\"\n# # we set this proj here and it seems to stick to R raster object. \n# # when writing into postgis, there SRID appears to be 3395\n\nif (!RPostgres::dbExistsTable(conn = con, name = \"past\")) {\n  cat(\"Raster layers do not exist in Postgres.\")\n  \n  print(\"Reading in Copernicus past raster\")\n  past <- raster::stack(raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio01\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio02\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio03\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio04\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio05\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio06\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio07\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio08\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio09\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio10\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio11\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio12\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio13\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio14\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio15\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio16\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio17\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio18\")),\n                        raster::raster(getpastclimate(source = \"copernicus\", bioclim = \"bio19\"))\n  )\n  print(\"Writing Copernicus Past to DB\")\n  rpostgis::pgWriteRast(con,\n                        name = \"past\", raster = past, overwrite = TRUE\n  )\n  rm(past)\n  gc()\n  \n  print(\"starting with reading Copernicus Future\")\n  future <- raster::stack(raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio01\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio02\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio03\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio04\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio05\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio06\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio07\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio08\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio09\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio10\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio11\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio12\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio13\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio14\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio15\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio16\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio17\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio18\")),\n                          raster::raster(getfutureclimate(source = \"copernicus\", bioclim = \"bio19\"))\n  )\n  \n  print(\"Writing Copernicus Future to DB\")\n  rpostgis::pgWriteRast(con,\n                        name = \"future\", raster = future, overwrite = TRUE\n  )\n  rm(future)\n  gc()\n  \n  print(\"Reading in Soil Rasters\")\n  soil <- raster::stack(raster::raster(getsoilproperties(\"STU_EU_DEPTH_ROOTS\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_CLAY\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_CLAY\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_SAND\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_SAND\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_SILT\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_SILT\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_OC\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_OC\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_BD\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_BD\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_GRAVEL\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_GRAVEL\")),\n                        raster::raster(getsoilproperties(\"SMU_EU_T_TAWC\")),\n                        raster::raster(getsoilproperties(\"SMU_EU_S_TAWC\")),\n                        raster::raster(getsoilproperties(\"STU_EU_T_TAWC\")),\n                        raster::raster(getsoilproperties(\"STU_EU_S_TAWC\"))\n  )\n  \n  \n  print(\"Writing Soil to DB\")\n  rpostgis::pgWriteRast(con,\n                        name = \"soil\", raster = soil, overwrite = TRUE\n  )\n  rm(soil)\n  gc()\n  \n} else {\n  cat(\"Raster layers exist in Postgres. Skipping. \")\n}\n\n\n\nDBI::dbDisconnect(conn = con)"
  },
  {
    "objectID": "index.html#shiny-app-development",
    "href": "index.html#shiny-app-development",
    "title": "Treeful Docs",
    "section": "Shiny App Development",
    "text": "Shiny App Development"
  },
  {
    "objectID": "index.html#database-deployment",
    "href": "index.html#database-deployment",
    "title": "Treeful Docs",
    "section": "Database Deployment",
    "text": "Database Deployment"
  },
  {
    "objectID": "index.html#shiny-app-deployment",
    "href": "index.html#shiny-app-deployment",
    "title": "Treeful Docs",
    "section": "Shiny App Deployment",
    "text": "Shiny App Deployment\nThanks to our Postgis database, the Shiny app itself is rather lightweight, does not need large files to be transferred and only does a minimum of plotting.\n\nGenerate Dockerfile from app. Golem handles this.\nBuild Docker image on host"
  },
  {
    "objectID": "index.html#reading-climate-rasters-into-r",
    "href": "index.html#reading-climate-rasters-into-r",
    "title": "Treeful Docs",
    "section": "Reading Climate Rasters into R",
    "text": "Reading Climate Rasters into R\nIn order to extract bioclimatic variables from each species location, we’ll have to load raster files into R. The function described here will solve a few complexities:\n\nWe convert raster values into units fit for anlysis.\nStacked rasters need to be treated accordingly.\nEfficiency matters greatly here, especially when it comes to RAM-efficient raster reading.\n\nWhat could and probably should not be done here: CRS-reprojections. Sometimes you may get a different CRS. Reproject outside of your ETL pipeline and then read.\n\n##################### Function to Get  climate Rasters ##################\n# In theory they can easily be adjusted to other climate raster providers. For some, snippets exist in the functions already but probably wont work \n# in the entire workflow of treeful. All processing here is only tested with Copernicus\n# you pass a provider and a bioclimatic var like bio01 or bio13 to the function and it returns one raster. you can stack them later on. \n\n\ngetpastclimate <- function(source = \"copernicus\", bioclim = \"bio01\") {\n  if (source == \"climateeu\") {\n    bio_path <- case_when(bioclim == \"bio01\" ~ \"MAT\",\n                          bioclim == \"bio12\" ~ \"MAP\",\n                          )\n    \n    bio_raster <- raster(paste0(\"data/climateEU/Normal_1961-1990_bioclim/\", bio_path, \".asc\"))\n\n    raster::crs(bio_raster) <- \"+proj=aea +lat_0=30 +lon_0=10 +lat_1=43 +lat_2=62 +x_0=0 +y_0=0 +ellps=intl +units=m +no_defs +type=crs\"\n    \n    bio_raster <- raster::projectRaster(bio_raster, crs = 4326)\n    \n  }\n  \n  if (source == \"copernicus\") {\n    # Get bioclimate data from copernicus. Download bioclimate file with login at https://cds.climate.copernicus.eu/\n    \n    bio_path <- toupper(bioclim)\n\n    bio_raster <- terra::rast(paste0(\"2_Data/0_raw_data/past/\", bio_path, \"_era5-to-1km_1979-2018-mean_v1.0.nc\"))\n    # convert bioclim as per copernicus documentation. for some reasone case_when does not work here.     \n    if (bioclim %in% c(\"bio01\", \"bio02\", \"bio04\", \"bio05\", \"bio06\", \"bio07\", \"bio08\", \"bio09\", \"bio10\", \"bio11\")) \n    {bio_raster <- bio_raster - 273.15\n    } else if (bioclim == \"bio12\") {bio_raster <- bio_raster*3600*24*365*1000\n    } else if (bioclim %in% c(\"bio13\", \"bio14\")) {bio_raster <- bio_raster*3600*24*30.5*1000\n    } else if (bioclim %in% c(\"bio16\", \"bio17\", \"bio18\", \"bio19\")) {bio_raster <- bio_raster*3600*24*91.3*1000\n    }\n    # a bit unclear if bio13-bio19 can and should also be comverted like bio12. probably not as theyre not on annual reference period\n\n    \n  }\n  # worldclim would be great cause it fetches all 19 bioclimatic at once. and has a great time range from 1970-2000. \n  # but units of each var are stange. \n\n  if (source == \"worldclim\") {\n    \n    bio_path <- case_when(bioclim == \"bio01\" ~ \"bio_1\",\n                          bioclim == \"bio02\" ~ \"bio_2\",\n                          bioclim == \"bio03\" ~ \"bio_3\",\n                          bioclim == \"bio04\" ~ \"bio_4\",\n                          bioclim == \"bio05\" ~ \"bio_5\",\n                          bioclim == \"bio06\" ~ \"bio_6\",\n                          bioclim == \"bio07\" ~ \"bio_7\",\n                          bioclim == \"bio08\" ~ \"bio_8\",\n                          bioclim == \"bio09\" ~ \"bio_9\",\n                          bioclim == \"bio10\" ~ \"bio_10\",\n                          bioclim == \"bio11\" ~ \"bio_11\",\n                          bioclim == \"bio12\" ~ \"bio_12\",\n                          bioclim == \"bio13\" ~ \"bio_13\",\n                          bioclim == \"bio14\" ~ \"bio_14\",\n                          bioclim == \"bio15\" ~ \"bio_15\",\n                          bioclim == \"bio16\" ~ \"bio_16\",\n                          bioclim == \"bio17\" ~ \"bio_17\",\n                          bioclim == \"bio18\" ~ \"bio_18\",\n                          bioclim == \"bio19\" ~ \"bio_19\"\n    )\n    \n    bio_raster <- raster(paste0(\"2_Data/1_output/worldclim_cropped/wc2.1_30s_\", bio_path, \".tif\"))\n    \n\n  }\n  \n  if (source == \"chelsa\") {\n    \n    bio_path <- case_when(bioclim == \"bio01\" ~ \"bio1\",\n                          bioclim == \"bio12\" ~ \"bio12\"\n    )\n    \n    bio_raster <- raster(paste0(\"2_Data/1_output/CHELSA_cropped/CHELSA_\", bio_path, \"_1981-2010_V.2.1.tif\"))\n    \n    if (bioclim == \"bio01\") {bio_raster <- raster::calc(bio_raster, function(x) { x / 10 - 273.15 })\n    } else if (bioclim == \"bio12\") {\n      bio_raster <- raster::calc(bio_raster, function(x) { x / 10})\n    }\n    \n    \n  }\n  \n  \n  return(bio_raster)\n  rm(bio_raster)\n  \n}\n\n\n#################### Get Future Climate ##################\n# for now using climate projection model MPI-ESM1-2-LR and socio-econ pathway 245 \n\ngetfutureclimate <- function(source = \"copernicus\", bioclim = \"bio01\") {\n  if(source == \"chelsa\") {\n    future_raster <- raster::stack(c(\"2_Data/1_output/CHELSA_cropped/CHELSA_bio1_2041-2070_gfdl-esm4_ssp370_V.2.1.tif\", \n                    \"2_Data/1_output/CHELSA_cropped/CHELSA_bio12_2041-2070_gfdl-esm4_ssp370_V.2.1.tif\"))\n    names(future_raster)[1] <- \"bio01\"\n    names(future_raster)[2] <- \"bio12\"\n    future_raster$bio01 <- raster::calc(future_raster$bio01, function(x) { x / 10 - 273.15 })\n    future_raster$bio12 <- raster::calc(future_raster$bio12, function(x) { x / 10})\n    \n  } else if (source == \"worldclim\") {\n    future_raster <- geodata::cmip6_tile(model = \"MPI-ESM1-2-LR\", lon = 11.01684, lat = 51.28691, \n                                         ssp = \"245\", time = \"2041-2060\", var = \"bioc\", path = \"2_Data/0_raw_data/\", res = 5)\n    names(future_raster)[1] <- \"bio01\"\n    names(future_raster)[12] <- \"bio12\"\n  } else if (source == \"copernicus\") {\n\n    bio_path <- toupper(bioclim)\n\n    bio_raster <- terra::rast(paste0(\"2_Data/0_raw_data/future/\", bio_path, \"_hadgem2-cc_rcp45_r1i1p1_1960-2099-mean_v1.0.nc\"))\n    #$X2050.01.01\n    names(bio_raster) <- terra::time(bio_raster)\n    bio_raster <- bio_raster$`2050-01-01`\n    # convert bioclim as per copernicus documentation. for some reason case_when does not work here.     \n    if (bioclim %in% c(\"bio01\", \"bio02\", \"bio04\", \"bio05\", \"bio06\", \"bio07\", \"bio08\", \"bio09\", \"bio10\", \"bio11\")) \n    {bio_raster <- bio_raster - 273.15\n    } else if (bioclim == \"bio12\") {bio_raster <- bio_raster*3600*24*365*1000\n    } else if (bioclim %in% c(\"bio13\", \"bio14\")) {bio_raster <- bio_raster*3600*24*30.5*1000\n    } else if (bioclim %in% c(\"bio16\", \"bio17\", \"bio18\", \"bio19\")) {bio_raster <- bio_raster*3600*24*91.3*1000\n    }\n    \n  }\n  \n  return(bio_raster)\n  rm(bio_raster)\n}\n\ngetsoilproperties <- function(variable = \"STU_EU_DEPTH_ROOTS\") {\n  soil_layer <- terra::rast(paste0(\"2_Data/0_raw_data/soil/\", variable, \"_4326.tif\"))\n  return(soil_layer)\n  rm(soil_layer)\n}"
  }
]